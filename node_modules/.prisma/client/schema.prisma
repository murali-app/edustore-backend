generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  phone     String?
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders        Order[]
  cartItems     CartItem[]
  examAttempts  ExamAttempt[]
  notifications Notification[]
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())

  products Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  price       Float
  fileUrl     String
  previewUrl  String?
  categoryId  String
  createdAt   DateTime @default(now())

  category  Category   @relation(fields: [categoryId], references: [id])
  orders    Order[]
  exams     Exam[]
  cartItems CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  productId String
  status    OrderStatus @default(PAID)
  paymentId String
  createdAt DateTime    @default(now())

  user    User     @relation(fields: [userId], references: [id])
  product Product  @relation(fields: [productId], references: [id])
  payment Payment? @relation("OrderPayment")
}

enum OrderStatus {
  PAID
  FAILED
  PENDING
}

model Exam {
  id        String   @id @default(uuid())
  productId String
  title     String
  duration  Int // in minutes
  createdAt DateTime @default(now())

  product  Product       @relation(fields: [productId], references: [id])
  attempts ExamAttempt[]
}

model ExamAttempt {
  id          String   @id @default(uuid())
  userId      String
  examId      String
  score       Int
  attemptedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  exam Exam @relation(fields: [examId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Payment {
  id      String        @id @default(uuid())
  orderId String        @unique
  amount  Float
  status  PaymentStatus @default(SUCCESS)
  gateway String
  paidAt  DateTime      @default(now())

  order Order @relation("OrderPayment", fields: [orderId], references: [id])
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}
